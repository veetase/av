#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'av'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/av` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/av now"
  exit 64
end

include GLI::App

program_desc 'an easy-use tool for automatically backup datebase to cloud.'

version Av::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

desc 'Describe backup here'
arg_name 'Describe arguments to backup here'
command :backup do |c|
  c.desc 'Describe a switch to backup'
  c.switch :s

  c.desc 'Describe a flag to backup'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|
    now = Time.now.strftime("%Y-%m-%d")
    filename = "bcareserver_prod_#{now}.sql.gz"
    backup_command = "pg_dump bcareserver_prod | gzip > #{filename}"
    # backup_command = "ls"
    output = system("#{backup_command}")
    if output
      upload("#{Dir.pwd}/#{filename}", filename)
    else
      puts "备份失败，备份命令为#{backup_command}"
    end

    puts "backup command ran"
  end
end

def upload(path, filename)
  puts "开始上传..."
  upload_cmd = "qshell_linux_amd64 rput database-backup #{filename} #{path}"
  system("#{upload_cmd}")
end

pre do |global,command,options,args|
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
